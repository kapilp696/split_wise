c
InviteNotificationMailer.invite_email(recipient_email, current_user).deliver_now
InviteNotificationMailer.invite_email
InviteNotificationMailer
Abc
InviteNotificationMailer
c
assigns(:groups)
c
groups
assigns(:groups)
c
user
c
user
group_membership
c
attributes_for(:group)
group
params
c
group
groups
:groups
c
groups
groups.to_a
groups.all
:groups
groups
group.name
:group
group
c
:total_borrowed
@total_borrowed
user.total_borrowed
c
user.total_borrowed
c
params
parameters
params
c
existing_user_ids
c
existing_user_ids
c
existing_user_ids
c
existing_user_ids
c
existing_user_ids
c
self.group_memberships.exists?(user_id: group_memberships_attribute["user_id"])
group_memberships_attribute.has_value?("")
c
GroupMembership.find_by(user_id: group_memberships_attribute["user_id"], group: self)
self.group_memberships.build(group_memberships_attribute)
c
self.group_memberships.build(group_memberships_attribute)
GroupMembership.find_by(user_id: group_memberships_attribute["user_id"], group: self)
c
self.group_memberships.build(group_memberships_attribute)
GroupMembership.find_by(user_id: group_memberships_attribute["user_id"], group: self)
group_memberships_attribute.has_value?("")
c
group_memberships_attribute
group_memberships_attributes
c
group_memberships_attributes
c
@group.save!
c
@group.group_memberships
@group
@group.save!
c
@group.save!
@group.group_memberships
@group
c
@group.group_memberships
@group
c
@group.group_memberships
@group
c
group_params
current_user
c
groups.persisted?
groups
c
user.total_borrowed
:total_borrowed
debt
amount
expense
user
c
amount
amount=user.total_borrowed.to_i
user.total_borrowed.to_i
amount
c
expense.amount.to_i
debt.amount.to_f
debt.amount.to_i
number_to_currency debt.amount
debt.amount
debt
expense
user
c
user
debt
user.total_borrowed.to_f
user.total_borrowed.class
user.total_borrowed
c
debt
user.total_borrowed
c
debt
c
debt
c
debt
expense
user
c
user
c
debt
expense
user
c
debt
expense
user
c
user
c
debt
expense
user
:user
user
c
debt.amount_previously_changed?
debt.amount_changed?
debt.previously_changed?
debt.changed?
debt.new_record?
debt
c
debt
c
users_with_debt
user_with_debt
c
debt
c
debt.to_user
debt.amount=share_per_user-debt.amount
share_per_user>debt.amount
debt
users_with_debt.include?(user.id)
user==expense.user
users_with_debt
c
users_with_debt.include?(user)
user
users_with_debt
c
debt
c
users_with_debt
c
debt
debt.expense_id
debt.amount
c
users_with_debt
share_per_user
c
users_with_debt
share_per_user
